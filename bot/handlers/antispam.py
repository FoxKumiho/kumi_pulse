# –ü—É—Ç—å —Ñ–∞–π–ª–∞: bot/handlers/antispam.py

from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ChatMemberOwner, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from loguru import logger
import aiogram
import time
import re
import unicodedata
from typing import Optional, Dict
import aiohttp
import asyncio
from ..modules.no_sql.user_db import (
    get_user,
    add_warning,
    mute_user,
    unmute_user,
    ban_user,
    unban_user,
    log_moderation_action,
    OWNER_BOT_ID,
    set_server_owner,
    update_user,
    ensure_user_exists,
    get_moderation_logs
)
from ..modules.no_sql.redis_client import redis_client, get_settings, save_settings, kick_inactive_users, is_spamming, get_ttl, reset_spam_state
import hashlib
from ..keyboards.antispam import get_main_menu, get_filter_menu, get_filter_settings_menu, get_action_menu

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ aiogram
assert aiogram.__version__ == "3.20.0.post0", f"Expected aiogram version 3.20.0.post0, but found {aiogram.__version__}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("../../../app.log", format="{time} {level} {message}", level="INFO", rotation="10 MB", retention="7 days")

router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class AntispamStates(StatesGroup):
    main_menu = State()
    select_filter = State()
    set_limit = State()
    set_action = State()
    set_duration = State()
    set_spam_words = State()
    set_exceptions_users = State()
    set_exceptions_domains = State()
    set_admin_group = State()
    set_media_filter = State()
    set_flood_seconds = State()

# –¢–µ–∫—Å—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã
TEXTS = {
    "main_menu": (
        "üì® <b>–ê–Ω—Ç–∏—Å–ø–∞–º: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞.\n"
        "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_admin_group."
    ),
    "filter_menu": (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ),
    "filter_settings": (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞: {}</b>\n\n"
        "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "‚îî –õ–∏–º–∏—Ç: {}\n"
        "‚îî –î–µ–π—Å—Ç–≤–∏–µ: {}\n"
        "‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}\n"
        "‚îî –ü–µ—Ä–∏–æ–¥ —Ñ–ª—É–¥–∞ (—Å–µ–∫): {}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    ),
    "set_limit": "üìè –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ 10 –¥–ª—è —Ñ–ª—É–¥–∞).",
    "set_action": "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: —É–¥–∞–ª–∏—Ç—å, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å, –º—É—Ç, –±–∞–Ω.",
    "set_duration": (
        "‚è± –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è (–æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–µ—Ä–≤–µ—Ä–∞/–±–æ—Ç–∞).\n"
        "–ü—Ä–∏–º–µ—Ä: 3d, 2h, 15m, 30s"
    ),
    "set_flood_seconds": "‚è± –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).",
    "set_spam_words": "üö´ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, viagra,casino).",
    "set_exceptions_users": "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123,456).",
    "set_exceptions_domains": "üîó –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com,google.com).",
    "set_admin_group": "üì¢ –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890).",
    "set_media_filter": "üé• –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞? (–¥–∞/–Ω–µ—Ç)",
    "settings": (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞</b>\n\n"
        "üìÑ –°—Ç–∞—Ç—É—Å: {}\n"
        "üî¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "‚è± –§–ª—É–¥: {} —Å–æ–æ–±—â–µ–Ω–∏–π/{} —Å–µ–∫ (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üîó Telegram —Å—Å—ã–ª–∫–∏: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üé• –ú–µ–¥–∏–∞: {} (–¥–µ–π—Å—Ç–≤–∏–µ: {})\n"
        "üßπ –ê–≤—Ç–æ–∫–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {}\n"
        "üë§ –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏): {}\n"
        "üîó –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–¥–æ–º–µ–Ω—ã): {}\n"
        "üì¢ –ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞: {}\n"
        "üìã –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞: {}\n"
        "‚è± –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É: {}"
    ),
    "success": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
    "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "admin_notification": (
        "üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º</b>\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n"
        "–ß–∞—Ç: {}\n"
        "–ü—Ä–∏—á–∏–Ω–∞: {}\n"
        "–î–µ–π—Å—Ç–≤–∏–µ: {}\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ: {}"
    ),
    "reset_spam": "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ —á–∞—Ç–µ {}.",
    "invalid_user": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID, @username –∏–ª–∏ username."
}

async def is_chat_owner(bot: Bot, user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞."""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        if isinstance(member, ChatMemberOwner):
            await set_server_owner(user_id, chat_id)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞"
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞ user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
        return False

async def parse_duration(text: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2d 3h 4m 5s') –≤ —Å–µ–∫—É–Ω–¥—ã."""
    try:
        total_seconds = 0
        matches = re.findall(r"(\d+)\s*([dhms])", text.lower())
        for value, unit in matches:
            value = int(value)
            if unit == "d":
                total_seconds += value * 86400
            elif unit == "h":
                total_seconds += value * 3600
            elif unit == "m":
                total_seconds += value * 60
            elif unit == "s":
                total_seconds += value
        return total_seconds
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '{text}': {str(e)}")
        return None

async def check_dnsbl(domain: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–µ–Ω –ø—Ä–æ—Ç–∏–≤ DNSBL (–Ω–∞–ø—Ä–∏–º–µ—Ä, zen.spamhaus.org) –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"http://zen.spamhaus.org/query/dnsbl?domain={domain}") as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ DNSBL –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}: {str(e)}")
        return False

async def get_message_hash(text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    normalized = unicodedata.normalize("NFKC", text.strip().lower())
    return hashlib.md5(normalized.encode()).hexdigest()

async def initialize_default_settings(chat_id: str) -> Dict:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    default_settings = {
        "enabled": False,
        "repeated_words": {"limit": 5, "action": "warn", "duration": 1800, "enabled": True},
        "repeated_messages": {"limit": 5, "action": "warn", "duration": 1800, "enabled": True},
        "flood": {"limit": 5, "seconds": 10, "action": "mute", "duration": 1800, "enabled": True},
        "spam_words": {"words": [], "action": "ban", "duration": 86400, "enabled": True},
        "telegram_links": {"enabled": False, "action": "mute", "duration": 1800},
        "external_links": {"enabled": False, "action": "delete", "duration": 0},
        "media_filter": {"enabled": False, "action": "delete", "duration": 0},
        "exceptions": {"users": [], "domains": []},
        "auto_kick_inactive": False,
        "case_sensitive": False,
        "warning_threshold": 3,
        "admin_group": None,
        "max_messages_per_minute": 10,
        "ignored_words": [],
        "ban_duration": 86400,
        "mute_duration": 1800,  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "action": "warn",
        "repeated_words_limit": 5
    }
    await save_settings("antispam", str(chat_id), default_settings)
    return default_settings

async def retry_on_flood_control(func, *args, max_retries=3, initial_delay=1, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ TooManyRequests."""
    attempt = 0
    delay = initial_delay
    while attempt < max_retries:
        try:
            return await func(*args, **kwargs)
        except TelegramRetryAfter as e:
            logger.warning(f"TooManyRequests: retry after {e.retry_after} —Å–µ–∫—É–Ω–¥, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
            await asyncio.sleep(e.retry_after)
            attempt += 1
            delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__}: {str(e)}")
            raise
    logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è {func.__name__}")
    raise TelegramRetryAfter(f"Max retries reached for {func.__name__}", retry_after=delay)

async def notify_admins(bot: Bot, settings: Dict, user_id: int, chat_id: int, reason: str, action: str, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ admin_group, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞."""
    admin_group = settings.get("admin_group")
    if admin_group and isinstance(admin_group, str) and admin_group.startswith("-100"):
        try:
            await bot.get_chat(admin_group)
            user = await get_user(user_id)
            user_mention = f"@{user.username}" if user.username else user.display_name or f"User {user_id}"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"spam_confirm_{user_id}_{chat_id}_{action}")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"spam_cancel_{user_id}_{chat_id}_{action}")]
            ])
            await retry_on_flood_control(
                bot.send_message,
                admin_group,
                TEXTS["admin_notification"].format(
                    user_mention,
                    chat_id,
                    reason,
                    action,
                    message_text[:100] if message_text else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
                ),
                reply_markup=keyboard
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ admin_group={admin_group} –¥–ª—è user_id={user_id}, chat_id={chat_id}, action={action}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ admin_group={admin_group}: {str(e)}")
            return False

async def check_spam(message: Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–ø–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text or message.caption or ""
    try:
        await ensure_user_exists(
            user_id=user_id,
            chat_id=chat_id,
            username=message.from_user.username,
            display_name=message.from_user.full_name,
            is_bot=message.from_user.is_bot
        )
        settings = await get_settings("antispam", str(chat_id)) or await initialize_default_settings(str(chat_id))
        if not settings.get("enabled", False):
            logger.debug(f"–ê–Ω—Ç–∏—Å–ø–∞–º –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è chat_id={chat_id}")
            return False
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        is_exempt = user.get_role_for_chat(chat_id) in ["–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"] or str(user_id) in settings.get("exceptions", {}).get("users", [])
        if is_exempt:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –≤ chat_id={chat_id}")
            return False
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞
        if message.sender_chat:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ sender_chat={message.sender_chat.id} –≤ chat_id={chat_id}, –∞–Ω—Ç–∏—Å–ø–∞–º –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è")
            return False
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram-—Å—Å—ã–ª–æ–∫
        if settings.get("telegram_links", {}).get("enabled", False):
            telegram_pattern = r"(?:https?:\/\/)?(?:t(?:elegram)?\.me|t\.me|tg:\/\/resolve\?domain=|telegram\.me)\/[\w\d_+]+|@[\w\d_]{4,}"
            matches = re.findall(telegram_pattern, text, re.IGNORECASE)
            if matches:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–æ–º–µ–Ω–æ–≤
                is_domain_exempt = False
                for match in matches:
                    domain = match.lstrip('@').lstrip('https://').lstrip('http://').lstrip('t.me/').lstrip('telegram.me/').lstrip('tg://resolve?domain=')
                    if domain in settings.get("exceptions", {}).get("domains", []):
                        is_domain_exempt = True
                        break
                if not is_domain_exempt:
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    try:
                        await retry_on_flood_control(message.delete)
                        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram-—Å—Å—ã–ª–∫–æ–π –æ—Ç user_id={user_id} –≤ chat_id={chat_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram-—Å—Å—ã–ª–∫–æ–π: {str(e)}")
                    logger.info(
                        f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                        f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=Telegram-—Å—Å—ã–ª–∫–∞: {', '.join(matches)}, "
                        f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('telegram_links', {}).get('action', settings.get('action', 'mute'))}"
                    )
                    await apply_antispam_action(user_id, chat_id, settings, message, bot, f"Telegram-—Å—Å—ã–ª–∫–∞: {', '.join(matches)}", "telegram_links")
                    return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞
        if settings.get("media_filter", {}).get("enabled", False) and any([
            message.photo, message.video, message.audio, message.document, message.sticker, message.animation
        ]):
            logger.info(
                f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç, "
                f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('media_filter', {}).get('action', settings.get('action', 'delete'))}"
            )
            await apply_antispam_action(user_id, chat_id, settings, message, bot, "–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç", "media_filter")
            return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥–∞ —á–µ—Ä–µ–∑ Redis
        if settings.get("flood", {}).get("enabled", True):
            limit = settings.get("flood", {}).get("limit", settings.get("max_messages_per_minute", 10))
            seconds = settings.get("flood", {}).get("seconds", 10)
            if await is_spamming(chat_id, user_id, limit, seconds):
                ttl = await get_ttl(chat_id, user_id)
                logger.info(
                    f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                    f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–§–ª—É–¥: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ({limit}/{seconds} —Å–µ–∫), "
                    f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('flood', {}).get('action', settings.get('action', 'mute'))}, ttl={ttl} —Å–µ–∫"
                )
                await apply_antispam_action(user_id, chat_id, settings, message, bot, f"–§–ª—É–¥: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ({limit}/{seconds} —Å–µ–∫)", "flood")
                return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if settings.get("repeated_messages", {}).get("enabled", True):
            async with redis_client() as redis:
                message_key = f"antispam:{chat_id}:{user_id}:messages"
                message_hash = await get_message_hash(text)
                await redis.lpush(message_key, message_hash)
                await redis.ltrim(message_key, 0, settings.get("repeated_messages", {}).get("limit", 5) - 1)
                recent_messages = await redis.lrange(message_key, 0, -1)
                await redis.expire(message_key, 3600)
                recent_messages = [msg.decode("utf-8") if isinstance(msg, bytes) else msg for msg in recent_messages]
                if len(recent_messages) >= settings.get("repeated_messages", {}).get("limit", 5):
                    if all(msg == message_hash for msg in recent_messages):
                        logger.info(
                            f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                            f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {text[:100]}, "
                            f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('repeated_messages', {}).get('action', settings.get('action', 'warn'))}"
                        )
                        await apply_antispam_action(user_id, chat_id, settings, message, bot, f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {text[:100]}", "repeated_messages")
                        await redis.delete(message_key)
                        return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
        if settings.get("repeated_words", {}).get("enabled", True):
            words = [word for word in text.split() if word.lower() not in settings.get("ignored_words", [])]
            if len(words) >= settings.get("repeated_words", {}).get("limit", settings.get("repeated_words_limit", 5)):
                repeated_count = 1
                prev_word = None
                for word in words:
                    current_word = word.lower() if not settings.get("case_sensitive", False) else word
                    if prev_word and current_word == prev_word:
                        repeated_count += 1
                        if repeated_count >= settings.get("repeated_words", {}).get("limit", settings.get("repeated_words_limit", 5)):
                            logger.info(
                                f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                                f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤: {word}, "
                                f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('repeated_words', {}).get('action', settings.get('action', 'warn'))}"
                            )
                            await apply_antispam_action(user_id, chat_id, settings, message, bot, f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤: {word}", "repeated_words")
                            return True
                    else:
                        repeated_count = 1
                    prev_word = current_word
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if settings.get("spam_words", {}).get("enabled", True) and settings.get("spam_words", {}).get("words", []):
            pattern = "|".join([re.escape(word) for word in settings["spam_words"]["words"]])
            if re.search(pattern, text, re.IGNORECASE if not settings.get("case_sensitive", False) else 0):
                logger.info(
                    f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                    f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {text[:100]}, "
                    f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('spam_words', {}).get('action', settings.get('action', 'ban'))}"
                )
                await apply_antispam_action(user_id, chat_id, settings, message, bot, f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {text[:100]}", "spam_words")
                return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        if settings.get("external_links", {}).get("enabled", False):
            url_pattern = r"https?://([A-Za-z0-9.-]+)"
            urls = re.findall(url_pattern, text, re.IGNORECASE)
            for domain in urls:
                if domain.lower() not in settings.get("exceptions", {}).get("domains", []):
                    if await check_dnsbl(domain):
                        logger.info(
                            f"–°–ü–ê–ú/–ù–ê–†–£–®–ï–ù–ò–ï: user_id={user_id}, username=@{user.username or 'Unknown'}, "
                            f"chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞=–°–ø–∞–º-—Å—Å—ã–ª–∫–∞: {domain}, "
                            f"–¥–µ–π—Å—Ç–≤–∏–µ={settings.get('external_links', {}).get('action', settings.get('action', 'delete'))}"
                        )
                        await apply_antispam_action(user_id, chat_id, settings, message, bot, f"–°–ø–∞–º-—Å—Å—ã–ª–∫–∞: {domain}", "external_links")
                        return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∞–º–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
        return False

async def apply_antispam_action(user_id: int, chat_id: int, settings: Dict, message: Optional[Message], bot: Bot, reason: str, filter_type: str) -> bool:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        filter_settings = settings.get(filter_type, settings.get("telegram_links", {}))
        action = filter_settings.get("action", settings.get("action", "warn"))
        duration = filter_settings.get("duration", settings.get("mute_duration", 1800))  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        warnings = user.warnings.get(str(chat_id), [])
        warning_count = len(warnings)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if user.get_role_for_chat(chat_id) in ["–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"] or str(user_id) in settings.get("exceptions", {}).get("users", []):
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ {action} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mention = f"@{user.username}" if user.username else user.display_name or f"User {user_id}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_member = await bot.get_chat_member(chat_id, bot.id)
        if not bot_member.can_restrict_members:
            logger.error(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ chat_id={chat_id}")
            await notify_admins(bot, settings, user_id, chat_id, f"–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        try:
            member = await bot.get_chat_member(chat_id, user_id)
            is_muted = member.status == "restricted" and not member.can_send_messages
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ chat_id={chat_id}: {str(e)}")
            is_muted = False

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ mute –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if action == "mute" and is_muted:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –º—É—Ç–µ –≤ chat_id={chat_id}, –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return False

        # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        is_message_deleted = filter_type == "telegram_links" or (action == "delete" and filter_type != "telegram_links")

        if action == "delete":
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ –∏ message –Ω–µ None
            if not is_message_deleted and message:
                try:
                    await retry_on_flood_control(message.delete)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {reason}")
                    is_message_deleted = True
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            await log_moderation_action(user_id, chat_id, "delete", reason, bot.id)
            await notify_admins(bot, settings, user_id, chat_id, reason, "delete", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return True

        if action == "warn":
            if warning_count < settings.get("warning_threshold", 3):
                success = await add_warning(user_id, chat_id, reason, bot.id)
                if success:
                    if message and not is_message_deleted:
                        try:
                            await retry_on_flood_control(
                                message.reply,
                                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {reason}"
                            )
                        except TelegramBadRequest as e:
                            if "message to be replied to is not found" in str(e):
                                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ bot.send_message")
                                await retry_on_flood_control(
                                    bot.send_message,
                                    chat_id,
                                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {reason}"
                                )
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
                                return False
                    elif not message:
                        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ None, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ bot.send_message –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
                        await retry_on_flood_control(
                            bot.send_message,
                            chat_id,
                            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {reason}"
                        )
                    await log_moderation_action(user_id, chat_id, "warn", reason, bot.id)
                    await notify_admins(bot, settings, user_id, chat_id, reason, "warn", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                    logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ chat_id={chat_id}: {reason}")
                    return True
                return False
            action = "mute"  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º—É—Ç—É, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

        if action == "mute":
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if user.get_role_for_chat(chat_id) not in ["–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
                duration = 1800  # –§–æ—Ä—Å–∏—Ä—É–µ–º 30 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            min_duration = 30  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            duration = max(duration, min_duration)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
            try:
                until_date = int(time.time()) + duration
                success = await mute_user(user_id, chat_id, duration, reason, bot.id)
                if success:
                    await retry_on_flood_control(
                        bot.restrict_chat_member,
                        chat_id,
                        user_id,
                        permissions={
                            "can_send_messages": False,
                            "can_send_media_messages": False,
                            "can_send_polls": False,
                            "can_send_other_messages": False
                        },
                        until_date=until_date
                    )
                    if message and not is_message_deleted:
                        try:
                            await retry_on_flood_control(
                                message.reply,
                                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç: {reason}"
                            )
                        except TelegramBadRequest as e:
                            if "message to be replied to is not found" in str(e):
                                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ bot.send_message")
                                await retry_on_flood_control(
                                    bot.send_message,
                                    chat_id,
                                    f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç: {reason}"
                                )
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
                                return False
                    elif not message:
                        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ None, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É—Ç–∞ —á–µ—Ä–µ–∑ bot.send_message –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
                        await retry_on_flood_control(
                            bot.send_message,
                            chat_id,
                            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç: {reason}"
                        )
                    await log_moderation_action(user_id, chat_id, "mute", reason, bot.id)
                    await notify_admins(bot, settings, user_id, chat_id, reason, "mute", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥ –≤ chat_id={chat_id}: {reason}")
                    return True
                return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –º—É—Ç–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
                await notify_admins(bot, settings, user_id, chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –º—É—Ç–∞: {str(e)}", "error", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                return False

        if action == "ban":
            success = await ban_user(user_id, chat_id, reason, bot.id, duration)
            if success:
                if message and not is_message_deleted:
                    try:
                        await retry_on_flood_control(
                            message.reply,
                            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration // 3600} —á–∞—Å–æ–≤: {reason}"
                        )
                    except TelegramBadRequest as e:
                        if "message to be replied to is not found" in str(e):
                            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ bot.send_message")
                            await retry_on_flood_control(
                                bot.send_message,
                                chat_id,
                                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration // 3600} —á–∞—Å–æ–≤: {reason}"
                            )
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
                            return False
                elif not message:
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ None, –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–Ω–∞ —á–µ—Ä–µ–∑ bot.send_message –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
                    await retry_on_flood_control(
                        bot.send_message,
                        chat_id,
                        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration // 3600} —á–∞—Å–æ–≤: {reason}"
                    )
                await log_moderation_action(user_id, chat_id, "ban", reason, bot.id)
                await notify_admins(bot, settings, user_id, chat_id, reason, "ban", message.text or message.caption or "" if message else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –≤ chat_id={chat_id}: {reason}")
                return True
            return False

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–Ω—Ç–∏—Å–ø–∞–º-–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")
        return False

@router.message(Command("antispam_settings"))
async def cmd_antispam_settings(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        if user.get_role_for_chat(chat_id) not in ["–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
            await retry_on_flood_control(message.reply, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø—Ä–∞–≤ –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /antispam_settings –≤ chat_id={chat_id}")
            return
        settings = await get_settings("antispam", str(chat_id))
        if not settings:
            settings = await initialize_default_settings(str(chat_id))
        else:
            default_settings = await initialize_default_settings(str(chat_id))
            for key, value in default_settings.items():
                if key not in settings:
                    settings[key] = value
            await save_settings("antispam", str(chat_id), settings)
        await state.update_data(chat_id=str(chat_id), settings=settings)
        await retry_on_flood_control(
            message.reply,
            TEXTS["settings"].format(
                "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_words"]["action"],
                f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_messages"]["action"],
                settings["flood"]["limit"],
                settings["flood"]["seconds"],
                settings["flood"]["action"],
                ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["spam_words"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["telegram_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["external_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["media_filter"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["max_messages_per_minute"]
            ),
            reply_markup=get_main_menu(settings)
        )
        await state.set_state(AntispamStates.main_menu)
        logger.info(f"–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è chat_id={chat_id}: {str(e)}")

@router.message(Command("set_admin_group"))
async def cmd_set_admin_group(message: Message, bot: Bot, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        if user.get_role_for_chat(chat_id) not in ["–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
            await retry_on_flood_control(message.reply, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø—Ä–∞–≤ –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /set_admin_group –≤ chat_id={chat_id}")
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await retry_on_flood_control(message.reply, TEXTS["set_admin_group"])
            await state.set_state(AntispamStates.set_admin_group)
            return
        admin_group = args[1].strip()
        if not admin_group.startswith("-100") or not admin_group[1:].isdigit():
            await retry_on_flood_control(message.reply, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890).")
            return
        settings = await get_settings("antispam", str(chat_id)) or await initialize_default_settings(str(chat_id))
        settings["admin_group"] = admin_group
        await save_settings("antispam", str(chat_id), settings)
        await retry_on_flood_control(message.reply, "‚úÖ –ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info(f"–ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞ {admin_group} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è chat_id={chat_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã –¥–ª—è chat_id={chat_id}: {str(e)}")

@router.message(AntispamStates.set_admin_group)
async def set_admin_group(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ FSM."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        if user.get_role_for_chat(chat_id) not in ["–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
            await retry_on_flood_control(message.reply, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã.")
            return
        admin_group = message.text.strip()
        if not admin_group.startswith("-100") or not admin_group[1:].isdigit():
            await retry_on_flood_control(message.reply, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890).")
            return
        settings = (await state.get_data()).get("settings", await initialize_default_settings(str(chat_id)))
        settings["admin_group"] = admin_group
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        await retry_on_flood_control(message.reply, "‚úÖ –ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        await retry_on_flood_control(
            message.reply,
            TEXTS["settings"].format(
                "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_words"]["action"],
                f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_messages"]["action"],
                settings["flood"]["limit"],
                settings["flood"]["seconds"],
                settings["flood"]["action"],
                ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["spam_words"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["telegram_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["external_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["media_filter"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["max_messages_per_minute"]
            ),
            reply_markup=get_main_menu(settings)
        )
        await state.set_state(AntispamStates.main_menu)
        logger.info(f"–ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞ {admin_group} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ FSM –¥–ª—è chat_id={chat_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ FSM: {str(e)}")

@router.callback_query(AntispamStates.main_menu)
async def process_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    chat_id = int((await state.get_data()).get("chat_id"))
    settings = (await state.get_data()).get("settings", {})
    try:
        if callback.data == "antispam_toggle":
            settings["enabled"] = not settings.get("enabled", False)
            await save_settings("antispam", str(chat_id), settings)
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["settings"].format(
                    "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_words"]["action"],
                    f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_messages"]["action"],
                    settings["flood"]["limit"],
                    settings["flood"]["seconds"],
                    settings["flood"]["action"],
                    ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["spam_words"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["telegram_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["external_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["media_filter"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                    ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["max_messages_per_minute"]
                ),
                reply_markup=get_main_menu(settings)
            )
            logger.info(f"–ê–Ω—Ç–∏—Å–ø–∞–º {'–≤–∫–ª—é—á–µ–Ω' if settings['enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è chat_id={chat_id}")
        elif callback.data == "select_filter":
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["filter_menu"],
                reply_markup=get_filter_menu()
            )
            await state.set_state(AntispamStates.select_filter)
        elif callback.data == "set_exceptions_users":
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_exceptions_users"])
            await state.set_state(AntispamStates.set_exceptions_users)
        elif callback.data == "set_exceptions_domains":
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_exceptions_domains"])
            await state.set_state(AntispamStates.set_exceptions_domains)
        elif callback.data == "set_media_filter":
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_media_filter"])
            await state.set_state(AntispamStates.set_media_filter)
        elif callback.data == "toggle_auto_kick":
            if not await is_chat_owner(callback.message.bot, callback.from_user.id, chat_id):
                await retry_on_flood_control(callback.message.reply, "üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–∫–∏–∫–æ–º.")
                return
            settings["auto_kick_inactive"] = not settings.get("auto_kick_inactive", False)
            if settings["auto_kick_inactive"]:
                await set_server_owner(callback.from_user.id, chat_id)
            await save_settings("antispam", str(chat_id), settings)
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["settings"].format(
                    "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_words"]["action"],
                    f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_messages"]["action"],
                    settings["flood"]["limit"],
                    settings["flood"]["seconds"],
                    settings["flood"]["action"],
                    ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["spam_words"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["telegram_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["external_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["media_filter"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                    ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["max_messages_per_minute"]
                ),
                reply_markup=get_main_menu(settings)
            )
            logger.info(f"–ê–≤—Ç–æ–∫–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö {'–≤–∫–ª—é—á–µ–Ω' if settings['auto_kick_inactive'] else '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è chat_id={chat_id}")
        await callback.answer()
    except Exception as e:
        await retry_on_flood_control(callback.message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è chat_id={chat_id}: {str(e)}")

@router.callback_query(AntispamStates.select_filter)
async def process_filter_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞."""
    filter_map = {
        "filter_repeated_words": "repeated_words",
        "filter_repeated_messages": "repeated_messages",
        "filter_flood": "flood",
        "filter_spam_words": "spam_words",
        "filter_telegram_links": "telegram_links",
        "filter_external_links": "external_links"
    }
    try:
        if callback.data == "back_to_main":
            settings = (await state.get_data()).get("settings", {})
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["settings"].format(
                    "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_words"]["action"],
                    f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["repeated_messages"]["action"],
                    settings["flood"]["limit"],
                    settings["flood"]["seconds"],
                    settings["flood"]["action"],
                    ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["spam_words"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["telegram_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["external_links"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    settings["media_filter"]["action"],
                    "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                    ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                    ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    settings["max_messages_per_minute"]
                ),
                reply_markup=get_main_menu(settings)
            )
            await state.set_state(AntispamStates.main_menu)
        elif callback.data in filter_map:
            filter_name = filter_map[callback.data]
            await state.update_data(current_filter=filter_name)
            settings = (await state.get_data()).get("settings", {})
            filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
            duration = filter_settings.get("duration", 1800) // 60
            seconds = filter_settings.get("seconds", 10) if filter_name == "flood" else "N/A"
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["filter_settings"].format(
                    filter_name,
                    filter_settings.get("limit", 5),
                    filter_settings.get("action", "warn"),
                    f"{duration} –º–∏–Ω—É—Ç" if duration else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    seconds
                ),
                reply_markup=get_filter_settings_menu(filter_name)
            )
            await state.set_state(AntispamStates.set_limit)
        await callback.answer()
    except Exception as e:
        await retry_on_flood_control(callback.message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è chat_id={callback.message.chat.id}: {str(e)}")

@router.callback_query(AntispamStates.set_limit)
async def process_filter_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞."""
    data = await state.get_data()
    filter_name = data.get("current_filter")
    settings = data.get("settings", {})
    try:
        if callback.data == "select_filter":
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["filter_menu"],
                reply_markup=get_filter_menu()
            )
            await state.set_state(AntispamStates.select_filter)
        elif callback.data.startswith("set_limit_"):
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_limit"])
            await state.set_state(AntispamStates.set_limit)
        elif callback.data.startswith("set_action_"):
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["set_action"],
                reply_markup=get_action_menu(filter_name)
            )
            await state.set_state(AntispamStates.set_action)
        elif callback.data.startswith("set_duration_"):
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_duration"])
            await state.set_state(AntispamStates.set_duration)
        elif callback.data.startswith("set_flood_seconds_"):
            await retry_on_flood_control(callback.message.edit_text, TEXTS["set_flood_seconds"])
            await state.set_state(AntispamStates.set_flood_seconds)
        await callback.answer()
    except Exception as e:
        await retry_on_flood_control(callback.message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name} –¥–ª—è chat_id={callback.message.chat.id}: {str(e)}")

@router.callback_query(AntispamStates.set_action)
async def process_action_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞."""
    data = await state.get_data()
    filter_name = data.get("current_filter")
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        if callback.data.startswith("action_"):
            action = callback.data.split("_")[-1]
            settings[filter_name]["action"] = action
            settings[filter_name]["enabled"] = True
            await save_settings("antispam", str(chat_id), settings)
            await state.update_data(settings=settings)
            filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
            duration = filter_settings.get("duration", 1800) // 60
            seconds = filter_settings.get("seconds", 10) if filter_name == "flood" else "N/A"
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["filter_settings"].format(
                    filter_name,
                    filter_settings.get("limit", 5),
                    filter_settings.get("action", "warn"),
                    f"{duration} –º–∏–Ω—É—Ç" if duration else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    seconds
                ),
                reply_markup=get_filter_settings_menu(filter_name)
            )
            await state.set_state(AntispamStates.set_limit)
        elif callback.data == f"set_filter_{filter_name}":
            filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
            duration = filter_settings.get("duration", 1800) // 60
            seconds = filter_settings.get("seconds", 10) if filter_name == "flood" else "N/A"
            await retry_on_flood_control(
                callback.message.edit_text,
                TEXTS["filter_settings"].format(
                    filter_name,
                    filter_settings.get("limit", 5),
                    filter_settings.get("action", "warn"),
                    f"{duration} –º–∏–Ω—É—Ç" if duration else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    seconds
                ),
                reply_markup=get_filter_settings_menu(filter_name)
            )
            await state.set_state(AntispamStates.set_limit)
        await callback.answer()
    except Exception as e:
        await retry_on_flood_control(callback.message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {str(e)}")

@router.message(AntispamStates.set_limit)
async def set_filter_limit(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞."""
    data = await state.get_data()
    filter_name = data.get("current_filter")
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        limit = int(message.text)
        if limit < 1:
            await retry_on_flood_control(message.reply, "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        settings[filter_name]["limit"] = limit
        settings[filter_name]["enabled"] = True
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
        duration = filter_settings.get("duration", 1800) // 60
        seconds = filter_settings.get("seconds", 10) if filter_name == "flood" else "N/A"
        await retry_on_flood_control(
            message.reply,
            TEXTS["filter_settings"].format(
                filter_name,
                filter_settings.get("limit", 5),
                filter_settings.get("action", "warn"),
                f"{duration} –º–∏–Ω—É—Ç",
                seconds
            ),
            reply_markup=get_filter_settings_menu(filter_name)
        )
        await state.set_state(AntispamStates.set_limit)
    except ValueError:
        await retry_on_flood_control(message.reply, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–∏–º–∏—Ç–∞.")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {str(e)}")

@router.message(AntispamStates.set_duration)
async def set_filter_duration(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞."""
    data = await state.get_data()
    filter_name = data.get("current_filter")
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        user = await get_user(message.from_user.id, create_if_not_exists=True, chat_id=chat_id)
        if user.get_role_for_chat(chat_id) not in ["–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
            await retry_on_flood_control(
                message.reply,
                "üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è."
            )
            return
        duration = await parse_duration(message.text)
        if duration is None:
            await retry_on_flood_control(message.reply, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä: 3d, 2h, 15m, 30s")
            return
        min_duration = 30  # 30 —Å–µ–∫—É–Ω–¥ –º–∏–Ω–∏–º—É–º –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        if duration < min_duration:
            await retry_on_flood_control(
                message.reply,
                f"‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {min_duration} —Å–µ–∫—É–Ω–¥."
            )
            return
        if duration > 365 * 86400:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1 –≥–æ–¥
            await retry_on_flood_control(
                message.reply,
                "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 –≥–æ–¥."
            )
            return
        settings[filter_name]["duration"] = duration
        settings[filter_name]["enabled"] = True
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
        duration = filter_settings.get("duration", 1800) // 60
        seconds = filter_settings.get("seconds", 10) if filter_name == "flood" else "N/A"
        await retry_on_flood_control(
            message.reply,
            TEXTS["filter_settings"].format(
                filter_name,
                filter_settings.get("limit", 5),
                filter_settings.get("action", "warn"),
                f"{duration} –º–∏–Ω—É—Ç",
                seconds
            ),
            reply_markup=get_filter_settings_menu(filter_name)
        )
        await state.set_state(AntispamStates.set_limit)
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {str(e)}")

@router.message(AntispamStates.set_flood_seconds)
async def set_flood_seconds(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    data = await state.get_data()
    filter_name = data.get("current_filter")
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        seconds = int(message.text)
        if seconds < 5 or seconds > 60:
            await retry_on_flood_control(message.reply, "‚ùå –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥.")
            return
        settings[filter_name]["seconds"] = seconds
        settings[filter_name]["enabled"] = True
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        filter_settings = settings.get(filter_name, {"limit": 5, "action": "warn", "duration": 1800, "seconds": 10})
        duration = filter_settings.get("duration", 1800) // 60
        seconds = filter_settings.get("seconds", 10)
        await retry_on_flood_control(
            message.reply,
            TEXTS["filter_settings"].format(
                filter_name,
                filter_settings.get("limit", 5),
                filter_settings.get("action", "warn"),
                f"{duration} –º–∏–Ω—É—Ç",
                seconds
            ),
            reply_markup=get_filter_settings_menu(filter_name)
        )
        await state.set_state(AntispamStates.set_limit)
    except ValueError:
        await retry_on_flood_control(message.reply, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞.")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∞ —Ñ–ª—É–¥–∞: {str(e)}")

@router.message(AntispamStates.set_spam_words)
async def set_spam_words(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."""
    data = await state.get_data()
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        words = [word.strip() for word in message.text.split(",") if word.strip()]
        settings["spam_words"]["words"] = words
        settings["spam_words"]["enabled"] = True
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        await retry_on_flood_control(message.reply, TEXTS["success"])
        await retry_on_flood_control(
            message.reply,
            TEXTS["filter_settings"].format(
                "spam_words",
                len(words),
                settings["spam_words"].get("action", "ban"),
                f"{settings['spam_words'].get('duration', 1800) // 60} –º–∏–Ω—É—Ç",
                "N/A"
            ),
            reply_markup=get_filter_settings_menu("spam_words")
        )
        await state.set_state(AntispamStates.set_limit)
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {str(e)}")

@router.message(AntispamStates.set_exceptions_users)
async def set_exceptions_users(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    data = await state.get_data()
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        users = [user.strip() for user in message.text.split(",") if user.strip().isdigit()]
        settings["exceptions"]["users"] = users
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        await retry_on_flood_control(message.reply, TEXTS["success"])
        await retry_on_flood_control(
            message.reply,
            TEXTS["settings"].format(
                "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_words"]["action"],
                f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_messages"]["action"],
                settings["flood"]["limit"],
                settings["flood"]["seconds"],
                settings["flood"]["action"],
                ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["spam_words"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["telegram_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["external_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["media_filter"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["max_messages_per_minute"]
            ),
            reply_markup=get_main_menu(settings)
        )
        await state.set_state(AntispamStates.main_menu)
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

@router.message(AntispamStates.set_exceptions_domains)
async def set_exceptions_domains(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–æ–º–µ–Ω–æ–≤."""
    data = await state.get_data()
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        domains = [domain.strip().lower() for domain in message.text.split(",") if domain.strip()]
        settings["exceptions"]["domains"] = domains
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        await retry_on_flood_control(message.reply, TEXTS["success"])
        await retry_on_flood_control(
            message.reply,
            TEXTS["settings"].format(
                "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_words"]["action"],
                f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_messages"]["action"],
                settings["flood"]["limit"],
                settings["flood"]["seconds"],
                settings["flood"]["action"],
                ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["spam_words"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["telegram_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["external_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["media_filter"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["max_messages_per_minute"]
            ),
            reply_markup=get_main_menu(settings)
        )
        await state.set_state(AntispamStates.main_menu)
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤: {str(e)}")

@router.message(AntispamStates.set_media_filter)
async def set_media_filter(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞."""
    data = await state.get_data()
    settings = data.get("settings", {})
    chat_id = int(data.get("chat_id"))
    try:
        response = message.text.lower().strip()
        if response not in ["–¥–∞", "–Ω–µ—Ç"]:
            await retry_on_flood_control(message.reply, "‚ùå –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
            return
        settings["media_filter"]["enabled"] = response == "–¥–∞"
        await save_settings("antispam", str(chat_id), settings)
        await state.update_data(settings=settings)
        await retry_on_flood_control(message.reply, TEXTS["success"])
        await retry_on_flood_control(
            message.reply,
            TEXTS["settings"].format(
                "–í–∫–ª—é—á–µ–Ω" if settings["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                f"{settings['repeated_words']['limit']} —Å–ª–æ–≤" if settings["repeated_words"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_words"]["action"],
                f"{settings['repeated_messages']['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π" if settings["repeated_messages"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["repeated_messages"]["action"],
                settings["flood"]["limit"],
                settings["flood"]["seconds"],
                settings["flood"]["action"],
                ", ".join(settings["spam_words"]["words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["spam_words"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["telegram_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["telegram_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["external_links"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["external_links"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["media_filter"]["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω",
                settings["media_filter"]["action"],
                "–í–∫–ª—é—á–µ–Ω" if settings["auto_kick_inactive"] else "–í—ã–∫–ª—é—á–µ–Ω",
                ", ".join(settings["exceptions"]["users"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                ", ".join(settings["exceptions"]["domains"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["admin_group"] or "–ù–µ –∑–∞–¥–∞–Ω–∞",
                ", ".join(settings["ignored_words"]) or "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                settings["max_messages_per_minute"]
            ),
            reply_markup=get_main_menu(settings)
        )
        await state.set_state(AntispamStates.main_menu)
        logger.info(f"–§–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞ {'–≤–∫–ª—é—á–µ–Ω' if settings['media_filter']['enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è chat_id={chat_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ–¥–∏–∞: {str(e)}")

@router.message(Command("kick_inactive"))
async def cmd_kick_inactive(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kick_inactive –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        if not await is_chat_owner(bot, user_id, chat_id):
            await retry_on_flood_control(message.reply, "üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
        settings = await get_settings("antispam", str(chat_id)) or await initialize_default_settings(str(chat_id))
        if not settings.get("auto_kick_inactive", False):
            await retry_on_flood_control(message.reply, "üö´ –ê–≤—Ç–æ–∫–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        args = message.text.split()[1:]
        inactivity_days = 30
        for arg in args:
            if arg.startswith("days=") and arg[len("days="):].isdigit():
                inactivity_days = int(arg[len("days="):])
        kicked_count = await kick_inactive_users(chat_id, bot, inactivity_days)
        await retry_on_flood_control(message.reply, f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ {kicked_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–æ {kicked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ chat_id={chat_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /kick_inactive –¥–ª—è chat_id={chat_id}: {str(e)}")

@router.message(Command("reset_spam"))
async def cmd_reset_spam(message: Message, bot: Bot):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
        if user.get_role_for_chat(chat_id) not in ["–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"]:
            await retry_on_flood_control(message.reply, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–∞–º–∞.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø—Ä–∞–≤ –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset_spam –≤ chat_id={chat_id}")
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await retry_on_flood_control(message.reply, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID, @username –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reset_spam @Okumi_di).")
            return
        target = args[1].strip()
        target_user_id = None
        target_username = None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if target.isdigit():
            target_user_id = int(target)
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /reset_spam: —É–∫–∞–∑–∞–Ω ID {target_user_id}")
        elif target.startswith("@"):
            target_username = target[1:]
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /reset_spam: —É–∫–∞–∑–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{target_username}")
        else:
            target_username = target
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /reset_spam: —É–∫–∞–∑–∞–Ω username {target_username}")

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id:
            target_user = await get_user(target_user_id)
            if not target_user:
                await retry_on_flood_control(message.reply, TEXTS["invalid_user"])
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        else:
            # –ü–æ–∏—Å–∫ –ø–æ username –≤ MongoDB
            target_user = None
            async for user_doc in get_user(username=target_username):
                target_user = user_doc
                break
            if not target_user:
                await retry_on_flood_control(message.reply, TEXTS["invalid_user"])
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            target_user_id = target_user.id

        await reset_spam_state(chat_id, target_user_id)
        await retry_on_flood_control(message.reply, TEXTS["reset_spam"].format(f"@{target_user.username or 'Unknown'} ({target_user_id})", chat_id))
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è user_id={target_user_id} –≤ chat_id={chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    except Exception as e:
        await retry_on_flood_control(message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ /reset_spam –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")

@router.message(F.text)
async def check_spam_message(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞."""
    await check_spam(message, bot)

@router.message(F.content_type.in_({'photo', 'video', 'audio', 'document', 'sticker', 'animation'}))
async def check_spam_media(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞."""
    await check_spam(message, bot)

@router.callback_query(F.data.startswith("spam_confirm_") | F.data.startswith("spam_cancel_"))
async def handle_spam_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –∞–Ω—Ç–∏—Å–ø–∞–º-–¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        parts = callback.data.split("_")
        action_type = parts[1]  # confirm –∏–ª–∏ cancel
        user_id = int(parts[2])
        chat_id = int(parts[3])
        spam_action = parts[4]
        user = await get_user(user_id)
        user_mention = f"@{user.username}" if user.username else user.display_name or f"User {user_id}"
        if action_type == "confirm":
            await retry_on_flood_control(
                callback.message.edit_text,
                f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {spam_action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ."
            )
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {spam_action} –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
        else:
            if spam_action == "warn":
                warnings = user.warnings.get(str(chat_id), [])
                if warnings:
                    warnings.pop()
                    await update_user(user_id, {f"warnings.{chat_id}": warnings})
            elif spam_action == "mute":
                await unmute_user(user_id, chat_id, callback.from_user.id)
                await retry_on_flood_control(
                    callback.message.bot.restrict_chat_member,
                    chat_id,
                    user_id,
                    permissions={"can_send_messages": True, "can_send_media_messages": True, "can_send_polls": True, "can_send_other_messages": True}
                )
            elif spam_action == "ban":
                await unban_user(user_id, chat_id, callback.from_user.id)
                await retry_on_flood_control(
                    callback.message.bot.unban_chat_member,
                    chat_id,
                    user_id,
                    only_if_banned=True
                )
            await retry_on_flood_control(
                callback.message.edit_text,
                f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ {spam_action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {spam_action} –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}")
        await callback.answer()
    except Exception as e:
        await retry_on_flood_control(callback.message.reply, TEXTS["error"])
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ spam_action –¥–ª—è user_id={user_id} –≤ chat_id={chat_id}: {str(e)}")