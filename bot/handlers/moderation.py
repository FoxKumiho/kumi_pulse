# –ü—É—Ç—å —Ñ–∞–π–ª–∞: bot/handlers/moderation.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from loguru import logger
import aiogram
import time
import re
import unicodedata
from ..modules.no_sql.user_db import get_user, add_warning, ban_user, unban_user, mute_user, unmute_user, \
    clear_warnings, get_moderation_logs, OWNER_BOT_ID, log_moderation_action, ROLE_NAMES
from motor.motor_asyncio import AsyncIOMotorCollection

# –ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏ 3.20.0.post0
assert aiogram.__version__ == "3.20.0.post0", f"Expected aiogram version 3.20.0.post0, but found {aiogram.__version__}"

router = Router()

async def check_permissions(message: Message, user, required_role: int, chat_id: int, command: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Ä–æ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    if user.role_level >= required_role or user.user_id == OWNER_BOT_ID or chat_id in user.server_owner_chat_ids:
        return True
    await message.answer(f"üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å **{ROLE_NAMES[required_role]}** –∏–ª–∏ –≤—ã—à–µ.")
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å {command} –±–µ–∑ –ø—Ä–∞–≤, chat_id={chat_id}")
    return False

async def check_bot_permissions(message: Message, required_permissions: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –±–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        bot_member = await message.bot.get_chat_member(chat_id=message.chat.id, user_id=message.bot.id)
        has_permissions = bot_member.status == "administrator" and all(
            getattr(bot_member, perm, False) for perm in required_permissions
        )
        if not has_permissions:
            perms_text = ", ".join(required_permissions.keys())
            await message.answer(
                f"üö´ –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–∞–≤ –Ω–∞ {perms_text}. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ {perms_text} –≤ chat_id={message.chat.id}")
        return has_permissions
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ chat_id={message.chat.id}: {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return False

async def normalize_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–±–µ–ª—ã –∏ —ç–º–æ–¥–∑–∏, —É–¥–∞–ª—è—è —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    name = name.strip()
    name = re.sub(r'[\u200B-\u200F\u202A-\u202E]', '', name)
    name = re.sub(r'\s+', ' ', name).strip()
    return unicodedata.normalize('NFKC', name)

async def extract_user_id(message: Message, for_unmute: bool = False) -> tuple[int | None, str | None, str | None]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id, duration –∏ reason –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
    args = message.text.split(maxsplit=2 if for_unmute else 3)
    reason = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    duration = None
    target_user_id = None

    clean_args = [re.sub(r'[<>[\]]', '', arg) for arg in args[1:]] if len(args) > 1 else []

    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
        if for_unmute:
            return target_user_id, None, None
        reason = ' '.join(clean_args) if clean_args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        if message.text.startswith('/mute') and clean_args:
            try:
                duration = clean_args[0] if clean_args[0].isdigit() else None
                reason = ' '.join(clean_args[1:]) if len(clean_args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            except IndexError:
                reason = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    elif not clean_args:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {message.text}")
        return None, None, None
    else:
        first_arg = clean_args[0]
        remaining_args = clean_args[1:] if len(clean_args) > 1 else []
        collection = await get_user_collection()

        if first_arg.isdigit():
            target_user_id = int(first_arg)
            if for_unmute or message.text.startswith('/clear_warnings'):
                return target_user_id, None, None
            reason = ' '.join(remaining_args) if remaining_args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            if message.text.startswith('/mute'):
                duration = remaining_args[0] if remaining_args and remaining_args[0].isdigit() else None
                reason = ' '.join(remaining_args[1:]) if len(remaining_args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        elif first_arg.startswith("@"):
            for entity in message.entities or []:
                if entity.type == "mention" and message.text[entity.offset:entity.offset + entity.length].strip('<>') == first_arg:
                    if entity.user:
                        target_user_id = entity.user.id
                        await get_user(target_user_id, create_if_not_exists=True, chat_id=message.chat.id, display_name=first_arg.lstrip('@'))
                        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Å display_name={first_arg.lstrip('@')}")
                    else:
                        username = first_arg.lstrip('@')
                        user_data = await collection.find_one(
                            {"username": {"$regex": f"^{re.escape(username)}$", "$options": "i"}, "group_ids": message.chat.id}
                        )
                        if user_data:
                            target_user_id = user_data["user_id"]
                            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ username={username}, user_id={target_user_id}")
                        else:
                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username={username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chat_id={message.chat.id}")
                            return None, None, None
            if for_unmute or message.text.startswith('/clear_warnings'):
                return target_user_id, None, None
            reason = ' '.join(remaining_args) if remaining_args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            if message.text.startswith('/mute'):
                duration = remaining_args[0] if remaining_args and remaining_args[0].isdigit() else None
                reason = ' '.join(remaining_args[1:]) if len(remaining_args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            user_data = await collection.find_one(
                {"display_name": first_arg, "group_ids": message.chat.id}
            )
            if not user_data:
                normalized_name = await normalize_name(first_arg)
                user_data = await collection.find_one(
                    {"display_name": {"$regex": f"^{re.escape(normalized_name)}$", "$options": "i"}, "group_ids": message.chat.id}
                )
            if not user_data:
                partial_name = ' '.join(first_arg.split())
                user_data = await collection.find_one(
                    {"display_name": {"$regex": f"^{re.escape(partial_name)}", "$options": "i"}, "group_ids": message.chat.id}
                )
            if user_data:
                target_user_id = user_data["user_id"]
                logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ display_name={first_arg}, user_id={target_user_id}")
                if for_unmute or message.text.startswith('/clear_warnings'):
                    return target_user_id, None, None
                reason = ' '.join(remaining_args) if remaining_args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                if message.text.startswith('/mute'):
                    duration = remaining_args[0] if remaining_args and remaining_args[0].isdigit() else None
                    reason = ' '.join(remaining_args[1:]) if len(remaining_args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å display_name={first_arg} –∏–ª–∏ normalized={await normalize_name(first_arg)} –∏–ª–∏ partial={' '.join(first_arg.split())} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chat_id={message.chat.id}")
                return None, None, None

    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: user_id={target_user_id}, duration={duration}, reason={reason}")
    return target_user_id, duration, reason

@router.message(Command(commands=["warn"]))
async def warn_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warn –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 1, chat_id, "/warn"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, _, reason = await extract_user_id(message)  # noqa: F841 –¥–ª—è duration
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/warn @Username —Å–ø–∞–º`, `/warn ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk —Å–ø–∞–º`, `/warn 123456789 —Å–ø–∞–º`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /warn –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /warn, chat_id={chat_id}")
        return
    if target_user_id == OWNER_BOT_ID or target_user.role_level >= user.role_level:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é.")
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {target_user_id} —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é –≤ chat_id={chat_id}")
        return

    success = await add_warning(target_user_id, chat_id, reason, user_id)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è user_id={target_user_id}, chat_id={chat_id}")
        return

    target_user = await get_user(target_user_id, create_if_not_exists=False, chat_id=chat_id)
    warnings_count = len(target_user.warnings.get(str(chat_id), []))
    response = (
        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{target_user.display_name or target_user_id}** –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üî¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
    )
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=(
                f"‚ö†Ô∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ **{message.chat.title}**.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üî¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {target_user_id} –≤ chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

@router.message(Command(commands=["clear_warnings"]))
async def clear_warnings_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear_warnings –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 2, chat_id, "/clear_warnings"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, _, _ = await extract_user_id(message, for_unmute=True)  # noqa: F841
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/clear_warnings @Username`, `/clear_warnings ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_warnings –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_warnings, chat_id={chat_id}")
        return

    success = await clear_warnings(target_user_id, chat_id, user_id)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Ö –Ω–µ—Ç.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è user_id={target_user_id}, chat_id={chat_id}")
        return

    response = f"üßπ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_user.display_name or target_user_id}** –æ—á–∏—â–µ–Ω—ã."
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üßπ –í–∞—à–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ **{message.chat.title}** –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {target_user_id} –≤ chat_id={chat_id}")

@router.message(Command(commands=["clear"]))
async def clear_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 1, chat_id, "/clear"):
        return
    if not await check_bot_permissions(message, {"can_delete_messages": True}):
        return

    if message.reply_to_message:
        try:
            await message.bot.delete_message(chat_id=chat_id, message_id=message.reply_to_message.message_id)
            await message.answer("üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message.reply_to_message.message_id} –≤ chat_id={chat_id}")
        except TelegramBadRequest:
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.reply_to_message.message_id} –≤ chat_id={chat_id}")
        return

    args = message.text.split(maxsplit=1)
    clean_args = [re.sub(r'[<>[\]]', '', arg) for arg in args[1:]] if len(args) > 1 else []
    if not clean_args or not clean_args[0].isdigit():
        await message.answer(
            "üóëÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/clear 10` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /clear –æ—Ç user_id={user_id}, chat_id={chat_id}")
        return
    count = int(clean_args[0])
    if count < 1 or count > 100:
        await message.answer("üö´ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π.")
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({count}) –≤ –∫–æ–º–∞–Ω–¥–µ /clear –æ—Ç user_id={user_id}, chat_id={chat_id}")
        return

    current_message_id = message.message_id
    deleted = 0
    for i in range(current_message_id - count, current_message_id):
        try:
            await message.bot.delete_message(chat_id=chat_id, message_id=i)
            deleted += 1
        except TelegramBadRequest:
            continue
    await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ chat_id={chat_id}")

@router.message(Command(commands=["mute"]))
async def mute_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 2, chat_id, "/mute"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, duration_str, reason = await extract_user_id(message)
    if not target_user_id or not duration_str:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id, @username, –∏–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/mute @Username 10 —Å–ø–∞–º`, `/mute ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk 30 –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /mute –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        duration = float(duration_str) * 60
    except ValueError:
        await message.answer(
            "üö´ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/mute ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk 10 —Å–ø–∞–º`"
        )
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ({duration_str}) –≤ –∫–æ–º–∞–Ω–¥–µ /mute –æ—Ç user_id={user_id}, chat_id={chat_id}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /mute, chat_id={chat_id}")
        return
    if target_user_id == OWNER_BOT_ID or target_user.role_level >= user.role_level:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é.")
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–º—É—Ç–∏—Ç—å {target_user_id} —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é –≤ chat_id={chat_id}")
        return

    ban_info = target_user.bans.get(str(chat_id), {"is_banned": False})
    if ban_info["is_banned"]:
        await message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –∑–∞–±–∞–Ω–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/unban`."
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –º—É—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ chat_id={chat_id}")
        return

    until_date = int(time.time() + duration)
    await message.bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=target_user_id,
        permissions={"can_send_messages": False},
        until_date=until_date
    )
    success = await mute_user(target_user_id, chat_id, duration, reason, user_id)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å user_id={target_user_id}, chat_id={chat_id}")
        return

    response = (
        f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –∑–∞–º—É—á–µ–Ω –Ω–∞ **{duration_str} –º–∏–Ω—É—Ç**.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=(
                f"üîá –í—ã –∑–∞–º—É—á–µ–Ω—ã –≤ —á–∞—Ç–µ **{message.chat.title}** –Ω–∞ **{duration_str} –º–∏–Ω—É—Ç**.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–∏–ª {target_user_id} –≤ chat_id={chat_id} –Ω–∞ {duration_str} –º–∏–Ω—É—Ç, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

@router.message(Command(commands=["unmute"]))
async def unmute_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 2, chat_id, "/unmute"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, _, _ = await extract_user_id(message, for_unmute=True)  # noqa: F841
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/unmute @Username`, `/unmute ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unmute –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unmute, chat_id={chat_id}")
        return

    mute_info = target_user.mutes.get(str(chat_id), {"is_muted": False, "until": 0.0})
    if not mute_info["is_muted"] or mute_info["until"] <= time.time():
        await message.answer(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –Ω–µ –∑–∞–º—É—á–µ–Ω.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å –º—É—Ç —Å –Ω–µ–∑–∞–º—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ chat_id={chat_id}")
        return

    ban_info = target_user.bans.get(str(chat_id), {"is_banned": False})
    if ban_info["is_banned"]:
        await message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –∑–∞–±–∞–Ω–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/unban`."
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å –º—É—Ç —Å –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ chat_id={chat_id}")
        return

    await message.bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=target_user_id,
        permissions={
            "can_send_messages": True,
            "can_send_media_messages": True,
            "can_send_polls": True,
            "can_send_other_messages": True,
            "can_add_web_page_previews": True
        }
    )
    success = await unmute_user(target_user_id, chat_id, user_id)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç —Å user_id={target_user_id}, chat_id={chat_id}")
        return

    response = f"üîä –ú—É—Ç —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_user.display_name or target_user_id}**."
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üîä –í–∞—à –º—É—Ç –≤ —á–∞—Ç–µ **{message.chat.title}** —Å–Ω—è—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–Ω—è–ª –º—É—Ç —Å {target_user_id} –≤ chat_id={chat_id}")

@router.message(Command(commands=["ban"]))
async def ban_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 3, chat_id, "/ban"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, duration_str, reason = await extract_user_id(message)
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/ban @Username 60 —Å–ø–∞–º`, `/ban ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ban –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ban, chat_id={chat_id}")
        return
    if target_user_id == OWNER_BOT_ID or target_user.role_level >= user.role_level:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é.")
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å {target_user_id} —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é –≤ chat_id={chat_id}")
        return

    until_date = None
    if duration_str and duration_str.isdigit():
        duration = float(duration_str) * 60
        until_date = int(time.time() + duration)

    await message.bot.ban_chat_member(chat_id=chat_id, user_id=target_user_id, until_date=until_date)
    success = await ban_user(target_user_id, chat_id, reason, user_id, until_date=until_date)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å user_id={target_user_id}, chat_id={chat_id}")
        return

    duration_text = f" –Ω–∞ **{duration_str} –º–∏–Ω—É—Ç**" if until_date else ""
    response = (
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –∑–∞–±–∞–Ω–µ–Ω{duration_text}.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ **{message.chat.title}**{duration_text}.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–∏–ª {target_user_id} –≤ chat_id={chat_id}{duration_text}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

@router.message(Command(commands=["unban"]))
async def unban_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 4, chat_id, "/unban"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, _, _ = await extract_user_id(message, for_unmute=True)  # noqa: F841
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/unban @Username`, `/unban ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unban –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unban, chat_id={chat_id}")
        return

    ban_info = target_user.bans.get(str(chat_id), {"is_banned": False})
    if not ban_info["is_banned"]:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –Ω–µ–∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ chat_id={chat_id}")
        return

    await message.bot.unban_chat_member(chat_id=chat_id, user_id=target_user_id)
    success = await unban_user(target_user_id, chat_id, user_id)
    if not success:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å user_id={target_user_id}, chat_id={chat_id}")
        return

    response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** —Ä–∞–∑–±–∞–Ω–µ–Ω."
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"‚úÖ –í–∞—à –±–∞–Ω –≤ —á–∞—Ç–µ **{message.chat.title}** —Å–Ω—è—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–∏–ª {target_user_id} –≤ chat_id={chat_id}")

@router.message(Command(commands=["kick"]))
async def kick_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kick –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 3, chat_id, "/kick"):
        return
    if not await check_bot_permissions(message, {"can_restrict_members": True}):
        return

    target_user_id, _, reason = await extract_user_id(message)  # noqa: F841
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/kick @Username —Å–ø–∞–º`, `/kick ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /kick –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /kick, chat_id={chat_id}")
        return
    if target_user_id == OWNER_BOT_ID or target_user.role_level >= user.role_level:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é.")
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å {target_user_id} —Å —Ä–∞–≤–Ω–æ–π/–≤—ã—Å—à–µ–π —Ä–æ–ª—å—é –≤ chat_id={chat_id}")
        return

    await message.bot.ban_chat_member(chat_id=chat_id, user_id=target_user_id)
    await message.bot.unban_chat_member(chat_id=chat_id, user_id=target_user_id)
    await log_moderation_action(target_user_id, chat_id, "kick", reason, user_id)
    response = (
        f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_user.display_name or target_user_id}** –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=(
                f"üë¢ –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞ **{message.chat.title}**.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì© –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", url=f"tg://user?id={message.bot.id}")]
            ])
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        if "bot can't initiate conversation with a user" in str(e):
            response += (
                "\nüì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥")
        else:
            response += f"\nüì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {str(e)}")
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–∏–ª {target_user_id} –∏–∑ chat_id={chat_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

@router.message(Command(commands=["user_status"]))
async def user_status_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /user_status –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 3, chat_id, "/user_status"):
        return

    target_user_id, _, _ = await extract_user_id(message, for_unmute=True)  # noqa: F841
    if not target_user_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ])
        await message.answer(
            "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username, –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `/user_status @Username`, `/user_status ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`",
            reply_markup=keyboard
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /user_status –æ—Ç user_id={user_id}, chat_id={chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        return

    try:
        target_user = await get_user(target_user_id, create_if_not_exists=True, chat_id=chat_id)
    except ValueError:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /user_status, chat_id={chat_id}")
        return

    warnings = target_user.warnings.get(str(chat_id), [])
    ban_info = target_user.bans.get(str(chat_id), {"is_banned": False, "reason": "", "issued_by": 0, "issued_at": 0.0, "until": 0.0})
    mute_info = target_user.mutes.get(str(chat_id), {"is_muted": False, "until": 0.0, "reason": "", "issued_by": 0, "issued_at": 0.0})

    response = (
        f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.display_name or target_user_id}**:\n\n"
        f"üé≠ **–†–æ–ª—å**: {target_user.get_role_for_chat(chat_id)}\n"
        f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**: {target_user.get_activity_count(chat_id)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π**: {len(warnings)}\n"
    )
    if warnings:
        response += "üìú **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è**:\n" + "\n".join(
            f"  ‚Ä¢ {w['reason']} (–≤—ã–¥–∞–Ω–æ {w['issued_by']} –≤ {time.ctime(w['issued_at'])})"
            for w in warnings
        ) + "\n"
    response += f"üö´ **–ë–∞–Ω**: {'–î–∞' if ban_info['is_banned'] and (not ban_info.get('until') or ban_info['until'] > time.time()) else '–ù–µ—Ç'}\n"
    if ban_info["is_banned"]:
        duration_text = f" –¥–æ {time.ctime(ban_info['until'])}" if ban_info.get("until") else ""
        response += f"  üìù –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {ban_info['reason']}\n"
        response += f"  üë§ –í—ã–¥–∞–Ω–æ: {ban_info['issued_by']} –≤ {time.ctime(ban_info['issued_at'])}{duration_text}\n"
    response += f"üîá **–ú—É—Ç**: {'–î–∞' if mute_info['is_muted'] and mute_info['until'] > time.time() else '–ù–µ—Ç'}\n"
    if mute_info["is_muted"] and mute_info["until"] > time.time():
        response += f"  üìù –ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞: {mute_info['reason']}\n"
        response += f"  üë§ –í—ã–¥–∞–Ω–æ: {mute_info['issued_by']} –≤ {time.ctime(mute_info['issued_at'])}\n"
        response += f"  ‚è∞ –î–æ: {time.ctime(mute_info['until'])}"

    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å {target_user_id} –≤ chat_id={chat_id}")

@router.message(Command(commands=["mod_logs"]))
async def mod_logs_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mod_logs –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 2, chat_id, "/mod_logs"):
        return

    logs = await get_moderation_logs(chat_id, limit=10)
    if not logs:
        await message.answer("üìú –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        logger.info(f"–õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è chat_id={chat_id} –ø—É—Å—Ç—ã")
        return

    response = "üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏**:\n\n"
    for log in logs:
        target_user = await get_user(log["user_id"], create_if_not_exists=False)
        issued_by_user = await get_user(log["issued_by"], create_if_not_exists=False)
        action_text = {
            "warn": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "clear_warnings": "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
            "mute": f"üîá –ú—É—Ç{' –Ω–∞ ' + str(log.get('duration', 0) / 60) + ' –º–∏–Ω—É—Ç' if log.get('duration') is not None else ''}",
            "unmute": "üîä –°–Ω—è—Ç–∏–µ –º—É—Ç–∞",
            "ban": f"üö´ –ë–∞–Ω{' –Ω–∞ ' + str(log.get('duration', 0) / 60) + ' –º–∏–Ω—É—Ç' if log.get('until_date') and log.get('duration') is not None else ''}",
            "unban": "‚úÖ –°–Ω—è—Ç–∏–µ –±–∞–Ω–∞",
            "kick": "üë¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ"
        }.get(log["action"], log["action"])
        response += (
            f"üî∏ **{action_text}**\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.display_name or log['user_id']}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {log['reason']}\n"
            f"üïí –í—ã–¥–∞–Ω–æ: {issued_by_user.display_name or log['issued_by']} –≤ {time.ctime(log['issued_at'])}\n\n"
        )
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è chat_id={chat_id}")

@router.message(Command(commands=["list_users"]))
async def list_users_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list_users –æ—Ç user_id={user_id}, chat_id={chat_id}, —Ç–µ–∫—Å—Ç: {message.text}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 1, chat_id, "/list_users"):
        return

    collection = await get_user_collection()
    users = await collection.find({"group_ids": chat_id}, {"display_name": 1, "user_id": 1, "username": 1}).to_list(length=100)
    if not users:
        await message.answer("üìã –í —á–∞—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        logger.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è chat_id={chat_id} –ø—É—Å—Ç")
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ**:\n\n"
    for user in users:
        response += f"üë§ {user.get('display_name', user['user_id'])} (@{user.get('username', '–Ω–µ—Ç')} | ID: {user['user_id']})\n"
    await message.answer(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è chat_id={chat_id}")

@router.message(Command(commands=["help_moderation"]))
async def help_moderation_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help_moderation –æ—Ç user_id={user_id}, chat_id={chat_id}")
    user = await get_user(user_id, create_if_not_exists=True, chat_id=chat_id)
    if not await check_permissions(message, user, 1, chat_id, "/help_moderation"):
        return

    help_text = (
        "üìú **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã**:\n\n"
        f"üî∏ **/warn <user_id | @username | –∏–º—è> [–ø—Ä–∏—á–∏–Ω–∞]** ‚Äî –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (—Ä–æ–ª—å: **{ROLE_NAMES[1]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/warn @Username —Å–ø–∞–º`, `/warn ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk —Å–ø–∞–º`, `/warn 123456789 —Å–ø–∞–º`\n\n"
        f"üî∏ **/clear_warnings <user_id | @username | –∏–º—è>** ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–æ–ª—å: **{ROLE_NAMES[2]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/clear_warnings @Username`, `/clear_warnings ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`\n\n"
        f"üî∏ **/clear <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> | reply** ‚Äî –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–æ–ª—å: **{ROLE_NAMES[1]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/clear 10` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üî∏ **/mute <user_id | @username | –∏–º—è> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_–º–∏–Ω—É—Ç–∞—Ö> [–ø—Ä–∏—á–∏–Ω–∞]** ‚Äî –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å: **{ROLE_NAMES[2]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/mute @Username 10 —Å–ø–∞–º`, `/mute ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk 30 –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`\n\n"
        f"üî∏ **/unmute <user_id | @username | –∏–º—è>** ‚Äî –°–Ω—è—Ç—å –º—É—Ç (—Ä–æ–ª—å: **{ROLE_NAMES[2]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/unmute @Username`, `/unmute ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`\n\n"
        f"üî∏ **/ban <user_id | @username | –∏–º—è> [–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_–º–∏–Ω—É—Ç–∞—Ö] [–ø—Ä–∏—á–∏–Ω–∞]** ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å: **{ROLE_NAMES[3]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/ban @Username 60 —Å–ø–∞–º`, `/ban ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`\n\n"
        f"üî∏ **/unban <user_id | @username | –∏–º—è>** ‚Äî –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å: **{ROLE_NAMES[4]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/unban @Username`, `/unban ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`\n\n"
        f"üî∏ **/kick <user_id | @username | –∏–º—è> [–ø—Ä–∏—á–∏–Ω–∞]** ‚Äî –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å: **{ROLE_NAMES[3]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/kick @Username —Å–ø–∞–º`, `/kick ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞`\n\n"
        f"üî∏ **/user_status <user_id | @username | –∏–º—è>** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å: **{ROLE_NAMES[3]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/user_status @Username`, `/user_status ü¶à‚É§“î·¥Ä–Ω–ß·¥Ä–Ωk`\n\n"
        f"üî∏ **/mod_logs** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ä–æ–ª—å: **{ROLE_NAMES[2]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/mod_logs`\n\n"
        f"üî∏ **/list_users** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ (—Ä–æ–ª—å: **{ROLE_NAMES[1]}**).\n"
        "  üìã –ü—Ä–∏–º–µ—Ä: `/list_users`\n\n"
        "üìå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ user_id, @username, –∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="user_status"),
            InlineKeyboardButton(text="üìú –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="mod_logs"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
        ]
    ])
    await message.answer(help_text, reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º –≤ chat_id={chat_id}")

async def get_user_collection() -> AsyncIOMotorCollection:
    from ..modules.no_sql.mongo_client import get_database
    db = await get_database()
    return db["users"]